class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        auto graph=formG(prerequisites, numCourses);
        vector<bool>used(numCourses, false), onPath=used;
        for(int i=0; i < numCourses; ++i){
            if(!used[i]){
                if(!dfs(i, used, onPath, graph))
                    return false;
            }
                
        }
        return true;
    }
    vector<vector<int>> formG(vector<pair<int, int>>& s, int n){
        vector<vector<int>>ret(n);
        for(auto p : s)
            ret[p.second].push_back(p.first);
        return ret;
    }
    
    bool dfs(int i, vector<bool>&used,vector<bool>&onPath, vector<vector<int>>& g){
        if(used[i])return true;
        used[i]=onPath[i]=true;
        for(auto e : g[i]){
            if(onPath[e] || !dfs(e, used, onPath, g))
                return false;
        }
        onPath[i]=false;
        return true;
    }
};
