class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>>ret(m,vector<int>(n,0));
        ret[0][0]=1;
        for(int i=1;i<n;++i)ret[0][i]=ret[0][i-1];
        for(int i=1;i<m;++i)ret[i][0]=ret[i-1][0];
        for(int i=1;i<m;++i){
            for(int j=1;j<n;++j)
                ret[i][j]=ret[i-1][j]+ret[i][j-1];
        }
        return ret[m-1][n-1];
    }
};


class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& ob) {
        auto m=ob.size(), n=ob[0].size();
        if(ob[0][0])return 0;
        vector<vector<int>>dp(m, vector<int>(n,0));
        dp[0][0]=1;
        for(int i=1; i<n; ++i)
            if(!ob[0][i] && dp[0][i-1])
                dp[0][i]=dp[0][i-1];       
        for(int i=1; i<m; ++i)
            if(!ob[i][0] && dp[i-1][0])
                dp[i][0]=dp[i-1][0];
        for(int i=1; i<m; ++i){
            for(int j=1; j<n; ++j){
                if(!ob[i][j]){
                        dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
};
