//198
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.empty())return 0;
        if(nums.size()==1)return nums[0];
        if(nums.size()==2)return max(nums[0],nums[1]);
        vector<int>tmp(nums.size());
        tmp[0]=nums[0];tmp[1]=max(nums[0],nums[1]);
        int i;
        for(i=2;i!=tmp.size();++i){
            tmp[i]=max(tmp[i-1],tmp[i-2]+nums[i]);
            
        }
        return tmp[i-1];
    }
};

//213
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.empty())return 0;
        auto m=nums.size();
        if(m==1)return nums[0];
        else if(m==2)return max(nums[0],nums[1]);
        vector<int>ret(m+1,0);
        ret[1]=nums[0];
        for(int i=2;i<m;++i){
            ret[i]=max(ret[i-2]+nums[i-1],ret[i-1]);
        }
        auto r=max(ret[m-1],ret[m-2]);
        vector<int>ret1(m+1,0);
        ret1[2]=nums[1];
        for(int i=3;i<=m;++i){
            ret1[i]=max(ret1[i-2]+nums[i-1],ret1[i-1]);
        }
        return max(r,max(ret1[m-1],ret1[m]));
    }
};
