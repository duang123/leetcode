class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ret;
        if(s.empty())return ret;
        vector<string>tmp;
        helper(ret,tmp,s,0);
        return ret;
    }
private:
    void helper(vector<vector<string>>&ret,vector<string>&tmp,const string&s,int start ){
        if(start==s.size()){
            ret.push_back(tmp);
            return ;
        }
        for(int i=start;i<s.size();++i){
            if(isPalindrome(s,start,i)){
                tmp.push_back(s.substr(start,i-start+1));
                helper(ret,tmp,s,i+1);
                tmp.pop_back();
            }
        }
    }
    bool isPalindrome(const string&s,int start,int i){
        while(start<i){
            if(s[start++]!=s[i--])return false;
        }
        return true;
    }
};
