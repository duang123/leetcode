/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return helper(nums,0,nums.size()-1);
    }
    TreeNode* helper(const vector<int>&nums,int start,int end){
        auto sz=end-start;
        if(sz<0)return nullptr;
        else if(sz==0)return new TreeNode(nums[start]);
        
        auto mid=start+(end-start)/2;
        TreeNode* root=new TreeNode(nums[mid]);
        root->left=helper(nums,start,mid-1);
        root->right=helper(nums,mid+1,end);
        return root;
    }
};
//109
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        return helper(head,nullptr);
    }
private:
    TreeNode* helper(ListNode*head,ListNode*tail){
        if(head==tail)return nullptr;
        else if(head->next==tail)return new TreeNode(head->val);
        auto slow=head,fast=head;
        while(fast!=tail&&fast->next!=tail){
            slow=slow->next;
            fast=fast->next->next;
        }
        auto root=new TreeNode(slow->val);
        root->left=helper(head,slow);
        root->right=helper(slow->next,tail);
        return root;
    }
};
