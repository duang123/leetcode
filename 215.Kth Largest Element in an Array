class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if(nums.empty() || k>nums.size())return 0;
        random_shuffle(nums.begin(),nums.end());
        return findK(nums, 0, nums.size()-1, nums.size()-k+1);
    }
private:
    int findK(vector<int>& nums, int i, int j, int k){
        auto index = findPivot(nums, i, j);
        if(index-i+1 == k)return nums[index];
        else if(index-i+1>k)return findK(nums, i, index-1, k);
        else return findK(nums, index+1, j, k-index+i-1);
    }
    
    int findPivot(vector<int>& nums, int l, int h){
        auto tmp=nums[l];
        int i=l+1,j=h;
        while(i<=j){
            while(i<=j && nums[i]<tmp)++i;
            while(i<=j && nums[j]>tmp)--j;
            if(i<=j){
                swap(nums[i],nums[j]);
                ++i;
                --j;
            }
                
        }
        swap(nums[j],nums[l]);
        return j;
    }
};
