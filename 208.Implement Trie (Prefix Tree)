class TrieNode{
public:
    TrieNode* son[26];
    bool isWord;
    TrieNode():isWord(false){
        for(auto &e:son)
            e=nullptr;
    }
};
class Trie {
public:
    /** Initialize your data structure here. */
    Trie():root(new TrieNode()) {}
    
    /** Inserts a word into the trie. */
    void insert(const string& word) {
        auto p=root;
        for(auto c : word){
            if(!p->son[c-'a'])p->son[c-'a']=new TrieNode();
            p=p->son[c-'a'];
        }
        p->isWord=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(const string& word) {
        auto p=root;
        for(auto c : word){
            if(!p->son[c-'a'])return false;
            p=p->son[c-'a'];
        }
        return p->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(const string& prefix) {
        auto p=root;
        for(auto c : prefix){
            if(!p->son[c-'a'])return false;
            p=p->son[c-'a'];
        }
        return true;
    }
private:
    TrieNode* root;
};
