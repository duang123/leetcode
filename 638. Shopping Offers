class Solution {
public:
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        return dfs(price, special, needs);
    }
    
    int dfs(vector<int>& price, vector<vector<int>>& special, vector<int>& needs){
        auto local=directPrice(price, needs);
        auto n=special.size();
        for(int i=0; i<n; ++i){
            auto goods=special[i];
            vector<int>tmp;
            for(int j=0; j<needs.size(); ++j){
                if(goods[j]>needs[j]){
                    tmp.resize(0);
                    break;
                }
                tmp.push_back(needs[j]-goods[j]);
            }
            if(!tmp.empty())
                local=min(local, dfs(price, special, tmp)+goods.back());
        }
        return local;
    }
    
    int directPrice(vector<int>& price, vector<int>& needs){
        auto local=0;
        for(int i=0; i<needs.size(); ++i)
            local+=price[i]*needs[i];
        return local;
    }
};
