//349
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.empty() || nums2.empty())return vector<int>{};
        vector<int>ret;
        unordered_set<int>st;
        for(auto i:nums1)st.insert(i);
        for(int i=0;i!=nums2.size();++i){
            if(st.find(nums2[i])!=st.end()){ret.push_back(nums2[i]);st.erase(nums2[i]);}
        }
        return ret;
    }
};
//350
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.empty() || nums2.empty())return vector<int>{};
        vector<int>ret;
        unordered_multiset<int>st;
        for(auto i:nums1)st.insert(i);
        for(int i=0;i!=nums2.size();++i){
            auto it=st.find(nums2[i]);
            if(it!=st.end()){ret.push_back(nums2[i]);st.erase(it);}
        }
        return ret;
    }
};
